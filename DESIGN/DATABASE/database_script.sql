-- MySQL Script generated by MySQL Workbench
-- Sat Feb 10 13:59:18 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GroupManaging
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema GroupManaging
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GroupManaging` DEFAULT CHARACTER SET utf8 ;
USE `GroupManaging` ;

-- -----------------------------------------------------
-- Table `GroupManaging`.`Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`Group` (
  `chat_id` INT NOT NULL COMMENT 'Unique chat_id of a group (obtained from Telegram)',
  `rules` TEXT NULL DEFAULT NULL COMMENT 'Rules of the current group',
  `link` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Link to the group',
  `pinned_messages` TEXT NULL DEFAULT NULL COMMENT 'List of pinned messages (Python list)',
  `name` VARCHAR(1000) NOT NULL COMMENT 'Name of the group',
  `sitckers_enabled` TINYINT NULL DEFAULT 1 COMMENT 'Is sending stickers allowed in this group?',
  `bots_enabled` TINYINT NULL DEFAULT 1 COMMENT 'Can non-admin users add their bots?',
  `auto_shorten_links` TINYINT NULL DEFAULT 1 COMMENT 'Automatically short detected links',
  PRIMARY KEY (`chat_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GroupManaging`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`User` (
  `user_id` INT NOT NULL COMMENT 'Unique ID for a user',
  `username` VARCHAR(100) NULL COMMENT 'Unique username for the user',
  `name` VARCHAR(500) NULL COMMENT 'Name of the user',
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GroupManaging`.`Events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`Events` (
  `event_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Unique ID for the event',
  `date` DATE NOT NULL COMMENT 'Date of the event',
  `title` TEXT NOT NULL COMMENT 'Title of the event',
  `description` TEXT NOT NULL COMMENT 'Description of the event',
  `long_description` TEXT NULL COMMENT 'URL to the long description',
  `price` DOUBLE NULL DEFAULT 0 COMMENT 'Price of the event',
  `location` VARCHAR(100) NULL COMMENT 'Location of the event',
  `location_url` TEXT NULL COMMENT 'An URL (e.g.: from Google Maps) of the location',
  `chat_id` INT NOT NULL COMMENT 'Inherited key - groups table',
  UNIQUE INDEX `event_id_UNIQUE` (`event_id` ASC),
  PRIMARY KEY (`event_id`, `chat_id`),
  INDEX `fk_Events_Group1_idx` (`chat_id` ASC),
  CONSTRAINT `fk_Events_Group1`
    FOREIGN KEY (`chat_id`)
    REFERENCES `GroupManaging`.`Group` (`chat_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GroupManaging`.`Polls`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`Polls` (
  `poll_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Unique ID of the poll',
  `total_votes` INT NOT NULL DEFAULT 0 COMMENT 'Count of the total votes of the poll',
  `multivote` TINYINT NULL DEFAULT 0 COMMENT 'Can a user vote multiple options?',
  `description` TEXT NULL COMMENT 'Poll description',
  `title` TEXT NOT NULL COMMENT 'Poll title',
  `chat_id` INT NOT NULL COMMENT 'Inherited key - group table',
  PRIMARY KEY (`poll_id`, `chat_id`),
  UNIQUE INDEX `poll_id_UNIQUE` (`poll_id` ASC),
  INDEX `fk_Polls_Group1_idx` (`chat_id` ASC),
  CONSTRAINT `fk_Polls_Group1`
    FOREIGN KEY (`chat_id`)
    REFERENCES `GroupManaging`.`Group` (`chat_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GroupManaging`.`Options`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`Options` (
  `option_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Unique ID for the option',
  `text` TEXT NOT NULL COMMENT 'Text of the option',
  `votes_count` INT NOT NULL COMMENT 'Count of the votes of current option',
  `poll_id` INT NOT NULL COMMENT 'Inherited key - polls table',
  `chat_id` INT NOT NULL COMMENT 'Inherited key - polls table',
  PRIMARY KEY (`option_id`, `poll_id`, `chat_id`),
  INDEX `fk_Options_Polls1_idx` (`poll_id` ASC, `chat_id` ASC),
  CONSTRAINT `fk_Options_Polls1`
    FOREIGN KEY (`poll_id` , `chat_id`)
    REFERENCES `GroupManaging`.`Polls` (`poll_id` , `chat_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GroupManaging`.`User_has_Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GroupManaging`.`User_has_Group` (
  `user_id` INT NOT NULL COMMENT 'Inherited key - user table',
  `chat_id` INT NOT NULL COMMENT 'Inherited key - group table',
  `spam` TINYINT NULL DEFAULT 0 COMMENT 'Is this user spammer?',
  `in_revision` TINYINT NULL COMMENT 'Are messages sent by this user pending for revision?',
  `is_admin` TINYINT NULL DEFAULT 0 COMMENT 'Is the user admin in the current group?',
  PRIMARY KEY (`user_id`, `chat_id`),
  INDEX `fk_User_has_Group_Group1_idx` (`chat_id` ASC),
  INDEX `fk_User_has_Group_User_idx` (`user_id` ASC),
  CONSTRAINT `fk_User_has_Group_User`
    FOREIGN KEY (`user_id`)
    REFERENCES `GroupManaging`.`User` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Group_Group1`
    FOREIGN KEY (`chat_id`)
    REFERENCES `GroupManaging`.`Group` (`chat_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
